'use strict'

const path = require('path')
const webpack = require('webpack')

const webpackDevMiddleware = require('webpack-dev-middleware')
const webpackHotMiddleware = require('webpack-hot-middleware')

let Utils = {
  configHotMiddleware(config) {
    config.entry.app.unshift('webpack-hot-middleware/client')
    config.plugins = config.plugins || []
    config.plugins.push(
      new webpack.HotModuleReplacementPlugin(),
      new webpack.NoEmitOnErrorsPlugin()
    )
  },
  setupDevMiddleware(server, compiler) {

    let options = compiler.options
    let devMiddleware = webpackDevMiddleware(compiler, {
      publicPath: options.output.publicPath,
      stats: {
        colors: true,
        modules: false,
        children: false,
        chunks: false,
        chunkModules: false
      }
    })
    server.use(devMiddleware)

    // extended function - readFileFromOutput
    devMiddleware.readFileFromOutput = function(assetPath){
      return devMiddleware.fileSystem.readFileSync(path.join(options.output.path, assetPath), 'utf8')
    }

    return devMiddleware
  },
  setupHotMiddleware(server, compiler) {
    server.use(webpackHotMiddleware(compiler))
    return webpackHotMiddleware
  },
  /*
   * (used for dev environment)
   *  examples:
   *  ---
   *  let devMiddleware = null
   *  if(process.env.NODE_ENV !== 'production'){
   *    devMiddleware = devServerUtils.setupHotDevMiddleware(server, webpackConfig).devMiddleware
   *  } else {
   *    devMiddleware = devServerUtils.setupDevMiddleware(server, webpack(webpackConfig))
   *  }
   *  ---
   */
  setupHotDevMiddleware(server, webpackConfig) {
    Utils.configHotMiddleware(webpackConfig)
    let compiler = webpack(webpackConfig)
    return {
      devMiddleware: Utils.setupDevMiddleware(server, compiler),
      hotMiddleware: Utils.setupHotMiddleware(server, compiler)
    }
  }
}

module.exports = Utils
